/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define CA_SINGLE_QUOTE (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_COMMA_AND_LESS_THAN))) // '

#define CA_EACU (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_SLASH_AND_QUESTION_MARK)) // é
#define CA_AGRV (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_NON_US_HASH_AND_TILDE)) // à
#define CA_UGRV (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_NON_US_BACKSLASH_AND_PIPE)) // ù
#define CA_EGRV (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_APOSTROPHE_AND_QUOTE)) // è
#define CA_CCED (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_RIGHT_BRACKET_AND_RIGHT_BRACE)) // ç

#define HCTRL(key) &hold_tap LC(key) key

&soft_off {
    hold-time-ms = <2000>; // Only turn off if the key is held for 2 seconds or longer.
};

&sl {
    release-after-ms = <2000>;
};


/ {
        combos {
            compatible = "zmk,combos";
            combo_bebe {
                timeout-ms = <100>;
                key-positions = <1 27>;
                bindings = <&kp CA_EACU>;
            };
        };
    
        behaviors {
            my_apos_leftprnt: apostrophe_left_parenthesis {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp CA_SINGLE_QUOTE>, <&kp LEFT_PARENTHESIS>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };

            my_commasemi: comma_semicolon {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp COMMA>, <&kp SEMICOLON>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };

            my_dquoterghtprnt: quote_right_parenthesis {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp LS(PERIOD)>, <&kp LS(N9)>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };

            my_periodcolon: period_colon {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp PERIOD>, <&kp LS(SEMICOLON)>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };

            my_questionexclam: question_exclamation {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp LS(N6)>, <&kp LS(N1)>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };

            my_left_home: left_home {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp UP_ARROW>, <&kp HOME>;
                mods = <(MOD_LSFT)>;
            };

            my_right_end: right_end {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp RIGHT_ARROW>, <&kp END>;
                mods = <(MOD_LSFT)>;
            };

            my_up_pgup: up_pgup {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp UP_ARROW>, <&kp PAGE_UP>;
                mods = <(MOD_LSFT)>;
            };

            my_down_pgdn: down_pgdn {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp DOWN_ARROW>, <&kp PAGE_DOWN>;
                mods = <(MOD_LSFT)>;
            };

            hold_tap: my_hold_tap {
                compatible = "zmk,behavior-hold-tap";
                label = "Hold-Tap";
                #binding-cells = <2>;
                tapping-term-ms = <200>; // Time in milliseconds to trigger hold behavior
                flavor = "tap-preferred"; // Use tap-preferred flavor
                bindings = <&kp &kp>;
            };
        };

    macros {
        macro_denis_bisson: macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings = <&kp D &kp E &kp N &kp I &kp S &kp SPACE &kp B &kp I &kp S &kp S &kp O &kp N>;
        };

        macro_0x: macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings = <&kp N0 &kp X>;
        };

        macro_emperso: macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings = <&kp D &kp E &kp N &kp I &kp S &kp PERIOD &kp B &kp I &kp S &kp S &kp O &kp N &kp AT
                        &kp D &kp E &kp N &kp I &kp S &kp B &kp I &kp S &kp S &kp O &kp N &kp PERIOD &kp C &kp O &kp M>;
        };

        macro_emjob: macro_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings = <&kp D &kp E &kp N &kp I &kp S &kp PERIOD &kp B &kp I &kp S &kp S &kp O &kp N &kp AT
                        &kp B &kp L &kp U &kp B &kp E &kp R &kp I &kp PERIOD &kp C &kp O &kp M>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer { // Layer 0
// | SW6  | SW7  | SW1  | SW2  | SW3  | SW4  | SW5  |                    | SW5  | SW4  | SW3  | SW2  | SW1  | SW7  | SW6  |
// | SW13 | SW14 | SW8  | SW9  | SW10 | SW11 | SW12 |                    | SW12 | SW11 | SW10 | SW9  | SW8  | SW14 | SW13 |
// | SW20 | SW21 | SW15 | SW16 | SW17 | SW18 | SW19 |                    | SW19 | SW18 | SW17 | SW16 | SW15 | SW21 | SW20 |
// | SW28 | SW29 | SW23 | SW24 | SW25 | SW26 | SW27 |                    | SW27 | SW26 | SW25 | SW24 | SW23 | SW29 | SW28 |
//                      | SW31 | SW32 | SW33 | SW34 | SW38 |      | SW38 | SW34 | SW33 | SW32 | SW31 | 
//                      | SW35 | SW36 | SW37 |                                  | SW37 | SW36 | SW35 |

            display-name = "base";
            bindings = <
&kp ESC  &none  &none  &none      &none     &none              &none                           &none      &none               &none  &none  &none  &none   &none
&kp TAB  &kp B  &kp Y  &kp O      &kp U     &my_apos_leftprnt  &none                           &none      &my_dquoterghtprnt  &kp L  &kp D  &kp W  &kp V   &kp Z
&none    &kp C  &kp I  &kp E      &kp A     &my_commasemi      &none                           &none      &my_periodcolon     &kp H  &kp T  &kp S  &kp N   &kp Q
&none    &kp G  &kp X  &kp J      &kp K     &kp MINUS          &none                           &none      &my_questionexclam  &kp R  &kp M  &kp F  &kp P   &none
                       &kp LALT   &none     &none              &none  &kp LSHFT     &kp ENTER  &tog 1     &tog 2              &my_up_pgup    &my_down_pgdn
                       &kp LCTRL  &kp LWIN  &kp BSPC                                                      &kp SPACE           &my_left_home  &my_right_end
                       >;

//          sensor-bindings = <&inc_dec_kp PG_UP PG_DN>;
//          sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW>;
            sensor-bindings = <&inc_dec_kp LEFT_ARROW RIGHT_ARROW>;
        };

        layer_1 { // Layer 1
// | SW6  | SW7  | SW1  | SW2  | SW3  | SW4  | SW5  |                    | SW5  | SW4  | SW3  | SW2  | SW1  | SW7  | SW6  |
// | SW13 | SW14 | SW8  | SW9  | SW10 | SW11 | SW12 |                    | SW12 | SW11 | SW10 | SW9  | SW8  | SW14 | SW13 |
// | SW20 | SW21 | SW15 | SW16 | SW17 | SW18 | SW19 |                    | SW19 | SW18 | SW17 | SW16 | SW15 | SW21 | SW20 |
// | SW28 | SW29 | SW23 | SW24 | SW25 | SW26 | SW27 |                    | SW27 | SW26 | SW25 | SW24 | SW23 | SW29 | SW28 |
//                      | SW31 | SW32 | SW33 | SW34 | SW38 |      | SW38 | SW34 | SW33 | SW32 | SW31 | 
//                      | SW35 | SW36 | SW37 |                                  | SW37 | SW36 | SW35 |
            display-name = "config";
            bindings = <
&trans  &trans        &trans  &trans  &trans  &trans  &trans                     &trans  &trans  &trans        &trans          &trans        &trans  &trans
&trans  &macro_emjob  &trans  &trans  &trans  &trans  &trans                     &trans  &trans  &trans        &macro_emperso  &trans        &trans  &trans
&trans  &trans        &trans  &trans  &trans  &trans  &trans                     &trans  &trans  &trans        &trans          &trans        &trans  &trans
&trans  &trans        &trans  &trans  &trans  &trans  &trans                     &trans  &trans  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &trans  &trans
                              &trans  &trans  &trans  &trans  &trans     &trans  &trans  &trans  &trans        &trans
                              &trans  &trans  &trans                                     &trans  &trans        &trans
            >;
        };

        layer_2 { // Layer2
// | SW6  | SW7  | SW1  | SW2  | SW3  | SW4  | SW5  |                    | SW5  | SW4  | SW3  | SW2  | SW1  | SW7  | SW6  |
// | SW13 | SW14 | SW8  | SW9  | SW10 | SW11 | SW12 |                    | SW12 | SW11 | SW10 | SW9  | SW8  | SW14 | SW13 |
// | SW20 | SW21 | SW15 | SW16 | SW17 | SW18 | SW19 |                    | SW19 | SW18 | SW17 | SW16 | SW15 | SW21 | SW20 |
// | SW28 | SW29 | SW23 | SW24 | SW25 | SW26 | SW27 |                    | SW27 | SW26 | SW25 | SW24 | SW23 | SW29 | SW28 |
//                      | SW31 | SW32 | SW33 | SW34 | SW38 |      | SW38 | SW34 | SW33 | SW32 | SW31 | 
//                      | SW35 | SW36 | SW37 |                                  | SW37 | SW36 | SW35 |
            display-name = "numbers";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                     &kp F2        &kp KP_DIVIDE    &kp LS(C)  &kp LS(D)  &kp LS(E)  &kp LS(F)  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                     &kp EQUAL     &kp KP_MULTIPLY  &kp N8     &kp N9     &kp LS(A)  &kp LS(B)  &kp DOLLAR
&trans  &trans  &trans  &trans  &trans  &trans  &trans                     &kp KP_DOT    &kp KP_PLUS      &kp N4     &kp N5     &kp N6     &kp N7     &macro_0x
&trans  &trans  &trans  &trans  &trans  &trans  &trans                     &trans        &kp KP_MINUS     &kp N0     &kp N1     &kp N2     &kp N3     &trans
                        &trans  &trans  &trans  &trans  &trans     &trans  &trans        &trans           &trans     &trans
                        &trans  &trans  &trans                                           &trans           &trans     &trans
            >;
        };

        layer_template { // Layer3
// | SW6  | SW7  | SW1  | SW2  | SW3  | SW4  | SW5  |                    | SW5  | SW4  | SW3  | SW2  | SW1  | SW7  | SW6  |
// | SW13 | SW14 | SW8  | SW9  | SW10 | SW11 | SW12 |                    | SW12 | SW11 | SW10 | SW9  | SW8  | SW14 | SW13 |
// | SW20 | SW21 | SW15 | SW16 | SW17 | SW18 | SW19 |                    | SW19 | SW18 | SW17 | SW16 | SW15 | SW21 | SW20 |
// | SW28 | SW29 | SW23 | SW24 | SW25 | SW26 | SW27 |                    | SW27 | SW26 | SW25 | SW24 | SW23 | SW29 | SW28 |
//                      | SW31 | SW32 | SW33 | SW34 | SW38 |      | SW38 | SW34 | SW33 | SW32 | SW31 | 
//                      | SW35 | SW36 | SW37 |                                  | SW37 | SW36 | SW35 |
            display-name = "template";
            bindings = <
&trans &trans &trans &trans &trans &trans &trans                   &trans &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans &trans                   &trans &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans &trans                   &trans &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans &trans                   &trans &trans &trans &trans &trans &trans &trans
                     &trans &trans &trans &trans &trans     &trans &trans &trans &trans &trans
                     &trans &trans &trans                                 &trans &trans &trans
            >;
        };

        
    }; // keymap
};
